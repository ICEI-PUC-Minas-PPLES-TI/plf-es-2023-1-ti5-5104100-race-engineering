import { MigrationInterface, QueryRunner } from 'typeorm';

export class CreateDatabase1680134493843 implements MigrationInterface {
  name = 'CreateDatabase1680134493843';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE TABLE "User" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" text,
        "email" text,
        "password" text,
        "userType" text,
        "lastLoginAt" timestamptz,
        "createdAt" timestamptz,
        "updatedAt" timestamptz
      );
      
      CREATE TABLE "Team" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "category" text,
        "createdAt" timestamptz,
        "updatedAt" timestamptz
      );
      
      CREATE TABLE "Driver" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "userId" int,
        "teamId" int,
        "isActive" boolean,
        "nationality" text,
        "bestLapTime" decimal,
        "bestRaceTime" decimal,
        "totalRaceTime" decimal,
        "totalRaceKm" decimal
      );
      
      CREATE TABLE "Circuit" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" text,
        "local" text,
        "trackSize" decimal,
        "safetyMargin" decimal,
        "createdAt" timestamptz,
        "updatedAt" timestamptz
      );
      
      CREATE TABLE "Lap" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "raceId" int,
        "bestTime" decimal,
        "averageTime" decimal,
        "totalTime" decimal
      );
      
      CREATE TABLE "Race" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "circuitId" int,
        "analystId" int,
        "mechanicId" int,
        "startDate" timestamptz NOT NULL,
        "endDate" timestamptz NOT NULL,
        "firstPlaceId" int,
        "totalLaps" int,
        "createdAt" timestamptz,
        "updatedAt" timestamptz
      );
      
      CREATE TABLE "Race_Driver" (
        "raceId" int,
        "driverId" int,
        PRIMARY KEY ("raceId", "driverId")
      );
      
      CREATE TABLE "Car" (
        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "teamId" int,
        "totalFuel" decimal,
        "currentFuel" decimal,
        "createdAt" timestamptz,
        "updatedAt" timestamptz
      );
      
      COMMENT ON COLUMN "Lap"."raceId" IS 'Ao apagar uma Race, realizar um ON DELETE CASCADE';
      
      ALTER TABLE "Driver" ADD FOREIGN KEY ("userId") REFERENCES "User" ("id");
      
      ALTER TABLE "Driver" ADD FOREIGN KEY ("teamId") REFERENCES "Team" ("id");
      
      ALTER TABLE "Lap" ADD FOREIGN KEY ("raceId") REFERENCES "Race" ("id");
      
      ALTER TABLE "Race" ADD FOREIGN KEY ("circuitId") REFERENCES "Circuit" ("id");
      
      ALTER TABLE "Race" ADD FOREIGN KEY ("analystId") REFERENCES "User" ("id");
      
      ALTER TABLE "Race" ADD FOREIGN KEY ("mechanicId") REFERENCES "User" ("id");
      
      ALTER TABLE "Race" ADD FOREIGN KEY ("firstPlaceId") REFERENCES "Driver" ("id");
      
      ALTER TABLE "Race_Driver" ADD FOREIGN KEY ("raceId") REFERENCES "Race" ("id");
      
      ALTER TABLE "Race_Driver" ADD FOREIGN KEY ("driverId") REFERENCES "Driver" ("id");
      
      ALTER TABLE "Car" ADD FOREIGN KEY ("teamId") REFERENCES "Team" ("id");
    `,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.dropDatabase('race_engineering');
  }
}
